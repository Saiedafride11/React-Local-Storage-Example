{"version":3,"sources":["logo.svg","utilities/storage.js","utilities/fakedb.js","components/Cosmetic/Cosmetic.js","components/Cosmetics/Cosmetics.js","App.js","reportWebVitals.js","index.js"],"names":["numbs","reduce","previous","current","jinis","id","name","price","getDb","localStorage","getItem","updateDb","cart","setItem","JSON","stringify","Cosmetic","props","cosmetic","gender","_id","handlePurchase","console","log","exists","shopping_cart","parse","newCount","addToDb","handleRemove","deleteFromDb","onClick","Cosmetics","useState","cosmetics","setCosmetics","useEffect","fetch","then","res","json","data","map","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qMAAe,I,YCUf,IAFA,IAAMA,EAAQ,CAAC,GAAI,GAAI,GAAI,IAE3B,MAAkBA,EAAlB,eAAyB,CAAX,KAKdA,EAAMC,QADU,SAACC,EAAUC,GAAX,OAAuBD,EAAWC,IAC5B,GAUtB,IAPA,IAAMC,EAAQ,CACV,CAAEC,GAAI,EAAGC,KAAM,OAAQC,MAAO,IAC9B,CAAEF,GAAI,EAAGC,KAAM,cAAeC,MAAO,KACrC,CAAEF,GAAI,EAAGC,KAAM,YAAaC,MAAO,KACnC,CAAEF,GAAI,EAAGC,KAAM,UAAWC,MAAO,MAGrC,MAAmBH,EAAnB,eAA0B,CAAX,KACUG,MAGNH,EAAMH,QADH,SAACC,EAAUC,GAAX,OAAuBD,EAAWC,EAAQI,QACjB,GCR/C,IAmBMC,EAAQ,kBAAMC,aAAaC,QAAQ,kBACnCC,EAAW,SAAAC,GACbH,aAAaI,QAAQ,gBAAiBC,KAAKC,UAAUH,K,OCb1CI,EA1BE,SAACC,GAAW,IAAD,EAIaA,EAAMC,SAAnCZ,EAJgB,EAIhBA,KAAMC,EAJU,EAIVA,MAAOY,EAJG,EAIHA,OAAQC,EAJL,EAIKA,IACvBC,EAAiB,SAAAhB,GAEnBiB,QAAQC,IAAIlB,GDWJ,SAAAA,GACZ,IAAMmB,EAAShB,IACXiB,EAAgB,GACpB,GAAKD,EAKD,IADAC,EAAgBX,KAAKY,MAAMF,IACTnB,GAAK,CACnB,IAAMsB,EAAWF,EAAcpB,GAAM,EACrCoB,EAAcpB,GAAMsB,OAGpBF,EAAcpB,GAAM,OATxBoB,EAAcpB,GAAM,EAYxBM,EAASc,GC1BLG,CAAQvB,IAGNwB,EAAe,SAAAxB,ID+BJ,SAAAA,GACjB,IAAMmB,EAAShB,IACf,GAAKgB,EAGA,CACD,IAAMC,EAAgBX,KAAKY,MAAMF,UAC1BC,EAAcpB,GACrBM,EAASc,ICtCTK,CAAazB,IAGjB,OACI,gCACI,wCAAWC,KACX,sCAASc,EAAT,YAAuBb,KACvB,4BAAG,6CAAgBY,OACnB,wBAAQY,QAAS,kBAAMV,EAAeD,IAAtC,sBACA,wBAAQW,QAAS,kBAAMF,EAAaT,IAApC,wBCCGY,EArBG,WAAO,IAAD,EACcC,mBAAS,IADvB,mBACbC,EADa,KACFC,EADE,KASpB,OAPAC,qBAAU,WACNC,MAAM,oBACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAIN,EAAaM,QAChC,IAIC,gCACI,oDAEIP,EAAUQ,KAAI,SAAAxB,GAAQ,OAAI,cAAC,EAAD,CAEtBA,SAAUA,GADLA,EAASE,YCLnBuB,MATf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.2842f658.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","function add(num1, num2) {\r\n    return num1 + num2;\r\n}\r\nfunction multiply(num1, num2) {\r\n    return num1 * num2;\r\n}\r\n\r\n// reduce\r\nconst numbs = [34, 56, 78, 92];\r\nlet sum = 0;\r\nfor (const num of numbs) {\r\n    sum = sum + num;\r\n}\r\n\r\nconst reducer = (previous, current) => previous + current;\r\nnumbs.reduce(reducer, 0)\r\n\r\n\r\nconst jinis = [\r\n    { id: 1, name: 'Alta', price: 25 },\r\n    { id: 2, name: 'Nail Polish', price: 500 },\r\n    { id: 3, name: 'face mask', price: 255 },\r\n    { id: 4, name: 'Mascara', price: 590 }\r\n];\r\nlet total = 0;\r\nfor (const jini of jinis) {\r\n    total = total + jini.price;\r\n}\r\nconst jinisiReducer = (previous, current) => previous + current.price;\r\nconst jinisTotal = jinis.reduce(jinisiReducer, 0)\r\n\r\nfunction substract(num1, num2) {\r\n    return num1 - num2\r\n}\r\nexport { add, multiply }","// // use local storage as your db for now\r\n// const addToDb = (id) => {\r\n//     const exists  = localStorage.getItem(id)\r\n//     console.log(exists)\r\n//     if(!exists){\r\n//         localStorage.setItem(id, 1);\r\n//     }\r\n//     else{\r\n//         const newCount = parseInt(exists) + 1;\r\n//         localStorage.setItem(id, newCount);\r\n//     }\r\n// }\r\n\r\n// export {addToDb}\r\n\r\n// ------------------------------------------------------------------------------------------------\r\n// ------------------------------------------------------------------------------------------------\r\n// ------------------------------------------------------------------------------------------------\r\n\r\n\r\n// use localstorage as your db for now\r\nconst addToDb = id => {\r\n    const exists = getDb();\r\n    let shopping_cart = {};\r\n    if (!exists) {\r\n        shopping_cart[id] = 1;\r\n    }\r\n    else {\r\n        shopping_cart = JSON.parse(exists);\r\n        if (shopping_cart[id]) {\r\n            const newCount = shopping_cart[id] + 1;\r\n            shopping_cart[id] = newCount;\r\n        }\r\n        else {\r\n            shopping_cart[id] = 1;\r\n        }\r\n    }\r\n    updateDb(shopping_cart);\r\n}\r\n\r\nconst getDb = () => localStorage.getItem('shopping_cart');\r\nconst updateDb = cart => {\r\n    localStorage.setItem('shopping_cart', JSON.stringify(cart));\r\n}\r\n\r\nconst removeFromDb = id => {\r\n    const exists = getDb();\r\n    if (!exists) {\r\n\r\n    }\r\n    else {\r\n        const shopping_cart = JSON.parse(exists);\r\n        delete shopping_cart[id];\r\n        updateDb(shopping_cart);\r\n    }\r\n}\r\n\r\nexport { addToDb, removeFromDb as deleteFromDb }","import React from 'react';\r\nimport { addToDb, deleteFromDb } from '../../utilities/fakedb';\r\n\r\nconst Cosmetic = (props) => {\r\n\r\n\r\n\r\n    const { name, price, gender, _id } = props.cosmetic;\r\n    const handlePurchase = id => {\r\n        //set to local stoage\r\n        console.log(id);\r\n        addToDb(id);\r\n    }\r\n\r\n    const handleRemove = id => {\r\n        deleteFromDb(id);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>name: {name}</h2>\r\n            <p>_id: {_id} Price: ${price}</p>\r\n            <p><small>gender: {gender}</small></p>\r\n            <button onClick={() => handlePurchase(_id)}>Purchase</button>\r\n            <button onClick={() => handleRemove(_id)}>Remove</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Cosmetic;","import React, { useEffect, useState } from 'react';\r\nimport { add as addition, multiply } from '../../utilities/storage';\r\nimport Cosmetic from '../Cosmetic/Cosmetic';\r\n\r\nconst Cosmetics = () => {\r\n    const [cosmetics, setCosmetics] = useState([]);\r\n    useEffect(() => {\r\n        fetch('./cosmetics.json')\r\n            .then(res => res.json())\r\n            .then(data => setCosmetics(data))\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3>Shop my cosmetics!</h3>\r\n            {\r\n                cosmetics.map(cosmetic => <Cosmetic\r\n                    key={cosmetic._id}\r\n                    cosmetic={cosmetic}></Cosmetic>)\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Cosmetics;","import logo from './logo.svg';\r\nimport './App.css';\r\nimport Cosmetics from './components/Cosmetics/Cosmetics';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Cosmetics />\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}